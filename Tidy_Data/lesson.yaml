- Class: meta
  Course: Applied Statistics
  Lesson: Tidy Data
  Author: Walter Garcia-Fontes
  Type: Standard
  Organization: Universitat Pompeu Fabra
  Version: 1.0.0

- Class: text
  Output: 'This tutorial is a transcript of part of Chapter 6 
   from the book "Probabilities, Statistics and Data: A Fresh Approach 
   Using R", by Darrin Speegle and Bryan Clair (CRS Press).
   A key feature of tidy data is that all data should be stored in a
   rectangular array, with each row an observation and each column a 
   variable. In particular, no information should be stored in variable
   names. As an example, consider the built-in data set WorldPhoneskkk which
   gives historical data on number of telephones in thousands for some
   years in the mid 20th century. We have imported this data set for you
   in this tutorial.'

- Class: cmd_question
  Output: The WorlPhones data is stored as a matrix with row names. Take a look
   to the data by entering "WorldPhones" at the command prompt.
  CorrectAnswer: WorldPhones
  AnswerTests: omnitest(correctExpr='WorldPhones')
  Hint: You have to enter "WorldPhones" to see the contents of this data set.

- Class: mult_question
  Output: Do you think this data set is tidy
  AnswerChoices: Yes, it is tidy; No, it is not tidy
  CorrectAnswer: No, it is not tidy
  AnswerTests: omnitest(correctVal='No, it is not tidy')
  Hint: Think if each row is a case, and variables do not hold data.

- Class: text
  Output: The variable names contain data on the region, so the data is not tidy.  Furthermore, the years are not held in a variable, they are just a row name.


- Class: cmd_question
  Output: 'We first convert the data into a tibble, and we add 
   an extra argument to the 
   "as_tibble" command, rownames = "year", to put the rownames into a variable
   called "year". We finally pipe the result into the function clean_names() of
   the janitor package, to put the names of the columns in a more standard
   way (all lower case, substitute dots by underscores). Create a pipeline
   with these instructions, and assign the result to a new dataframe called
   "phones".'
  CorrectAnswer: phones <- as_tibble(WorldPhones, rownames = "year") %>% clean_names()
  AnswerTests: omnitest(correctExpr='phones <- as_tibble(WorldPhones, rownames = "year") %>% clean_names()')
  Hint: 'You have to enter: phones <- as_tibble(WorldPhones, rownames = "year") %>% clean_names().'

- Class: cmd_question
  Output: 'Enter "phones" now to see the structure of the new data frame.'
  CorrectAnswer: phones
  AnswerTests: omnitest(correctExpr='phones')
  Hint: 'You have to enter: phones.'

- Class: cmd_question
  Output: 'As it can be seen now, the rownames have been put into a new
   variable called "year", and the names of the columns have been standardized.
   Every entry in this data set gives the value for a year and a region, so 
   the tidy format should have three variables: year, region and telephones.
   Making this change will cause this data set to become much longer. Instead
   of 7 rows and 7 columns, we will have 49 rows, one for each 7 x 7 year
   and region combinations. The tool to make this change is the pivot_longer
   function from the tidyr package, which we have enabled for you. The command
   is phones %>% pivot_longer(cols = !year, names_to = "region", values_to = "telephones").
   Assign the result to the same "phones" dataframe. Try it now.'
  CorrectAnswer: phones <- phones %>% pivot_longer(cols = !year, names_to = "region", values_to = "telephones")
  AnswerTests: omnitest(correctExpr='phones <- phones %>% pivot_longer(cols = !year, names_to = "region", values_to = "telephones")')
  Hint: 'You have to enter: phones <- phones %>% pivot_longer(cols = !year, names_to = "region", values_to = "telephones").'

- Class: cmd_question
  Output: 'This function used four arguments. The first was the dataframe we 
   wanted to pivot, in this case phones. Second, we specified which columns to
   use, with the expression cols = !year, which meant "all columns except year".
   Finally, we told the function that the names of the columns should become
   a new variable called "region", and the values in those columns should
   become a new variable called "telephone". Enter "phones" now to check how
   the tidy dataframe looks like.'
  CorrectAnswer: phones
  AnswerTests: omnitest(correctExpr='phones')
  Hint: 'You have to enter: phones.'

- Class: cmd_question
  Output: 'The format with the regions in the columns is called "wide", while
   the tidy format is called "long". The tidyr package also provides a function
   pivot_wider which performs the opposite transformation to pivot_longer, that 
   is, it converts a "long" (tidy) format into a "wide" format. We have loaded
   a data set called "babynames" that consists of all names of babies born 
   in the USA from 1880 to 2017, together with the sex assigned to the baby, 
   the number of babies of that sex given that name in that year, and the
   proportion of babies with that sex in that year that were given the name.
   Only names that were given to five or more babies are included. Enter 
   "head(babynames)" to see the first rows of this data set.'
  CorrectAnswer: head(babynames)
  AnswerTests: omnitest(correctExpr='head(babynames)')
  Hint: 'You have to enter: head(babynames).'

- Class: text
  Output: 'In the pivot_wider function, we need to provide the names of the 
   columns with the names_from argument, and a values_from value or values,
   which gives the columns to get the cell values from. It is often also needed
   to provide an id_cols variable which uniquely identifies each observation.'

- Class: mult_question
  Output: 'In the "babynames" data frame, to convert it to a wide format with Females and Males in two different columns, showing the total number of newborns with a given name and sex'
  AnswerChoices: We have to use id_cols=name, names_from=sex and values_from=n; We have to use id_cols=name, names_from=n and values_from=sex; We have to use id_cols=name, names_from=sex and values_from=prop
  CorrectAnswer: We have to use id_cols=name, names_from=sex and values_from=n
  AnswerTests: omnitest(correctVal='We have to use id_cols=name, names_from=sex and values_from=n')
  Hint: If we want to have two columns, one for females and the other one for 
   males, we need names_from=sex because this is going to be the names of 
   the columns in the wide format. Furthermore, values_from=n because we want
   the total number newborns (female or male).

- Class: cmd_question
  Output: 'Create a pipeline to first filter the "babynames" data set for
   year=2000, and then create a wide data set with females and males in 
   different columns.'
  CorrectAnswer: babynames %>% filter(year==2000) %>% pivot_wider(id_cols=name, names_from=sex, values_from=n)
  AnswerTests: omnitest(correctExpr='babynames %>% filter(year==2000) %>% pivot_wider(id_cols=name, names_from=sex, values_from=n)')
  Hint: 'You have to enter: babynames %>% filter(year==2000) %>% pivot_wider(id_cols=name, names_from=sex, values_from=n).'

- Class: text
  Output: We have now the same data set, but in wide format. Depending on the 
   statistical tasks that we want to perform, we will find it more convenient to   use a long or a wide format. This tutorial finishes here.
